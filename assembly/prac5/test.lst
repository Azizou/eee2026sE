ARM GAS  prac5.s 			page 1


   1              	@OGBAZI001 PRKYUM003
   2              	@ ======= MODIFY THE LINE ABOVE!!!! =======
   3              	
   4              	    .syntax unified
   5              	    .global _start
   6              	    .cpu cortex-m0
   7              	    .thumb
   8              	
   9              	vectors: 
  10 0000 00200020 	    .word 0x20002000        @ defines the reset value of the stack pointer
  11 0004 01000000 	    .word _start + 1        @ defines the reset vector, thereby specifying the first instruction.
  12              		
  13 0008 17000000 		.word Default_Handler + 1
  14 000c 11000000 		.word HardFault_Handler + 1
  15              	
  16              	HardFault_Handler:          @ critical! The PC must jump here in the event that a HardFault excepti
  17              	                            @ display 0xAA on the LEDs so that we know a fault happened.
  18 0010 AA22     	        MOVS R2,0xAA
  19 0012 4261     			STR R2,[R0,0x14]
  20 0014 FCE7     	        B HardFault_Handler
  21              	
  22              	@ All other exceptions *should* be pointed here in order to have some sort of defined behaviour in
  23              	@ the event that they occur. However, this isn't necessary as they probably won't occur.
  24              	Default_Handler:        
  25 0016 C046     	        NOP
  26 0018 FDE7     	        B Default_Handler
  27              	
  28              	_start:
  29              	
  30 001a 2548     			LDR R0, =0x40021000                 
  31 001c 4169     	    LDR R1, [R0, #0x14]                 
  32 001e 254A     	    LDR R2, =0b1100000000000000000     
  33 0020 1143     	    ORRS R1, R1, R2                     
  34 0022 4161     	    STR R1, [R0, #0x14]
  35              		
  36 0024 2448     		LDR R0, =0x48000400                 
  37 0026 0168     	    LDR R1, [R0]                        
  38 0028 244A     	    LDR R2, =0b0101010101010101         
  39 002a 1143     	    ORRS R1, R1, R2                     
  40 002c 0160     	    STR R1, [R0]                  
  41              		
  42 002e 244B     		LDR R3, =0x48000000                 
  43 0030 244A     		LDR R2,=0x5				@Set up pull up resistors
  44 0032 DA60     		STR R2,[R3,0x0C]
  45              	        @ initialise pins connected to LEDs
  46 0034 0124     		MOVS	R4,#0x1
  47 0036 0125     		MOVS R5,#0x1
  48 0038 30B4     		PUSH {R4,R5}
  49              	        @ initialise the first two Fibonacci numbers by pushing two 1's to the stack
  50 003a 234E     		LDR R6,=0x48000414
  51 003c 234F     		LDR R7,=0x20000000
  52 003e 3E60     		STR R6,[R7]
  53              	        @ you're welcome to move some data to 0x2000 0000 for testing purposes now.
  54              	
  55              	initialisations_complete:       @ critical! The word at 0x2000 0000 will be overwritten by the auto
  56              	
  57              	        @ in a loop 45 times, calculate the next Fibonacci number and push it to the stack
ARM GAS  prac5.s 			page 2


  58 0040 2D26     			MOVS R6,#45
  59              	fib_loop:
  60 0042 009C     		LDR R4,[SP]
  61 0044 019D     		LDR R5,[SP,#0x4]
  62 0046 2C19     		ADDS R4,R5,R4
  63 0048 10B4     		PUSH {R4}
  64 004a 013E     		SUBS R6,#1
  65 004c F9D1     		BNE fib_loop
  66              		
  67              		
  68              	
  69              	fib_calc_complete:              @ critical! Here, the automarker will verify the contents of the st
  70              			
  71 004e 1F4F     			LDR R7,=0x20000000
  72 0050 3E68     			LDR R6,[R7]
  73 0052 009C     			LDR R4,[SP]
  74 0054 3460     			STR R4,[R6]
  75              	        @ read in the data contained in the first word of RAM and store the highest Fibonacci numbe
  76              	        @ Remeber: there is a risk that the data there is invalid. In this event, the hardfault sho
  77              	
  78              	
  79              	cycle_patterns:
  80              	        @ display all of the following, with a 0.5 seconds interval inbetween:
  81              	        @ 0x00 ; 0x81 ; 0xC3 ; 0xE7 ; 0xFF ; 0x7E ; 0x3C ; 0x18
  82              	        @ the delay 
  83              			
  84 0056 1E4C     			LDR R4,=#1000000
  85 0058 0022     			MOVS R2,0x00
  86 005a 4261     			STR R2,[R0,0x14]
  87 005c 00F024F8 			BL delay_routine
  88              			
  89 0060 1B4C     			LDR R4,=#1000000
  90 0062 8122     			MOVS R2,0x81
  91 0064 4261     			STR R2,[R0,0x14]
  92 0066 00F01FF8 			BL delay_routine
  93              			
  94 006a 194C     			LDR R4,=#1000000
  95 006c C322     			MOVS R2,0xC3
  96 006e 4261     			STR R2,[R0,0x14]
  97 0070 00F01AF8 			BL delay_routine
  98              			
  99 0074 164C     			LDR R4,=#1000000
 100 0076 E722     			MOVS R2,0xE7
 101 0078 4261     			STR R2,[R0,0x14]
 102 007a 00F015F8 			BL delay_routine
 103              			
 104 007e 144C     			LDR R4,=#1000000
 105 0080 FF22     			MOVS R2,0xFF
 106 0082 4261     			STR R2,[R0,0x14]
 107 0084 00F010F8 			BL delay_routine
 108              			
 109 0088 114C     			LDR R4,=#1000000
 110 008a 7E22     			MOVS R2,0x7E
 111 008c 4261     			STR R2,[R0,0x14]
 112 008e 00F00BF8 			BL delay_routine
 113              			
 114 0092 0F4C     			LDR R4,=#1000000
ARM GAS  prac5.s 			page 3


 115 0094 3C22     			MOVS R2,0x3C
 116 0096 4261     			STR R2,[R0,0x14]
 117 0098 00F006F8 			BL delay_routine
 118              			
 119 009c 0C4C     			LDR R4,=#1000000
 120 009e 1822     			MOVS R2,0x18
 121 00a0 4261     			STR R2,[R0,0x14]
 122 00a2 00F001F8 			BL delay_routine
 123              	
 124 00a6 D6E7     	        B cycle_patterns
 125              	
 126              	delay_routine:
 127              	        @ do delay here, and then return in the correct way.
 128 00a8 013C     			SUBS R4,#1
 129 00aa FDD1     			BNE delay_routine
 130 00ac 7047     			BX LR
 131 00ae 00000010 	
 131      02400000 
 131      06000004 
 131      00485555 
 131      00000000 
ARM GAS  prac5.s 			page 4


DEFINED SYMBOLS
             prac5.s:28     .text:0000001a _start
             prac5.s:9      .text:00000000 vectors
             prac5.s:24     .text:00000016 Default_Handler
             prac5.s:16     .text:00000010 HardFault_Handler
                            .text:00000000 $d
             prac5.s:18     .text:00000010 $t
             prac5.s:55     .text:00000040 initialisations_complete
             prac5.s:59     .text:00000042 fib_loop
             prac5.s:69     .text:0000004e fib_calc_complete
             prac5.s:79     .text:00000056 cycle_patterns
             prac5.s:126    .text:000000a8 delay_routine
             prac5.s:131    .text:000000ae $d
                   .debug_aranges:0000000c $d

NO UNDEFINED SYMBOLS
